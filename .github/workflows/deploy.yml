name: Deploy to AWS EC2

on:
  push:
    branches:
      - main # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.5' # 프로젝트에서 사용하는 Node.js 버전에 맞춰 설정

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          npm install  # build 없이 의존성만 설치

      # 4. Create .env file from GitHub Secrets
      - name: Create .env file
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
          echo "AWS_BUCKET_FOLDER_NAME=${{ secrets.AWS_BUCKET_FOLDER_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_ID=${{ secrets.DB_ID }}" >> .env
          echo "DB_PW=${{ secrets.DB_PW }}" >> .env
          echo "dialect=mysql" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}" >> .env
          echo "TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}" >> .env
          echo "TOSS_SECURITY_KEY=${{ secrets.TOSS_SECURITY_KEY }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> .env
          echo "RABBITMQ_QUEUE=${{ secrets.RABBITMQ_QUEUE }}" >> .env

      # 5. Copy files to AWS EC2
      - name: Deploy to AWS EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          source: './' # 현재 프로젝트 디렉토리
          target: '/home/ec2-user/app' # EC2에서의 대상 디렉토리

      # 6. SSH to EC2 and restart the application
      - name: Restart Application
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          script: |
            # PM2가 설치되지 않았다면 설치
            if ! command -v pm2 &> /dev/null; then
              npm install pm2@latest -g
            fi

            # 애플리케이션 디렉토리로 이동
            cd /home/ec2-user/app || exit 1  # 실패 시 종료

            # 기존 프로세스 종료
            pm2 stop all || true

            # 의존성 설치 (production)
            npm install --production

            # .env 파일을 EC2 서버로 복사
            cp /home/ec2-user/app/.env /home/ec2-user/app/.env

            # 애플리케이션 실행 (빌드 없이 바로 실행)
            pm2 start src/index.js --name "my-app"  # 엔트리 파일에 맞게 수정 (예: src/index.js)

            # PM2에서 애플리케이션의 상태 확인
            pm2 list
